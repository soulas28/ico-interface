/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  ExclusiveForTest,
  ExclusiveForTestInterface,
} from "../ExclusiveForTest";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "reentrance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b506101cf8061003a6000396000f3fe608060405234801561001057600080fd5b506004361061002a5760003560e01c80622a3bb11461002f575b600080fd5b610037610039565b005b60008054906101000a900460ff1615610087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161007e9061013f565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff16622a3bb16040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100e857600080fd5b505af11580156100fc573d6000803e3d6000fd5b5050505060008060006101000a81548160ff021916908315150217905550565b600061012960168361015f565b915061013482610170565b602082019050919050565b600060208201905081810360008301526101588161011c565b9050919050565b600082825260208201905092915050565b7f54656d706f72616c6c7920556e617661696c61626c650000000000000000000060008201525056fea2646970667358221220ba9f31c9821486c7707fbab29be237e21ce65daf25c525e7591243374173d22f64736f6c63430008070033";

type ExclusiveForTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExclusiveForTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExclusiveForTest__factory extends ContractFactory {
  constructor(...args: ExclusiveForTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ExclusiveForTest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExclusiveForTest> {
    return super.deploy(overrides || {}) as Promise<ExclusiveForTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExclusiveForTest {
    return super.attach(address) as ExclusiveForTest;
  }
  connect(signer: Signer): ExclusiveForTest__factory {
    return super.connect(signer) as ExclusiveForTest__factory;
  }
  static readonly contractName: "ExclusiveForTest";
  public readonly contractName: "ExclusiveForTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExclusiveForTestInterface {
    return new utils.Interface(_abi) as ExclusiveForTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExclusiveForTest {
    return new Contract(address, _abi, signerOrProvider) as ExclusiveForTest;
  }
}
