/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { Provider, TransactionRequest } from '@ethersproject/providers'
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'

import type {
  LimitedTokenForTest,
  LimitedTokenForTestInterface,
} from '../LimitedTokenForTest'

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'name_',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'symbol_',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'Unlocked',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isLimited',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'unlock',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'bypassedLock',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x608060405233600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600560146101000a81548160ff0219169083151502179055503480156200006d57600080fd5b5060405162001b5738038062001b57833981810160405281019062000093919062000203565b818181818160039080519060200190620000af929190620000d5565b508060049080519060200190620000c8929190620000d5565b505050505050506200040c565b828054620000e3906200031d565b90600052602060002090601f01602090048101928262000107576000855562000153565b82601f106200012257805160ff191683800117855562000153565b8280016001018555821562000153579182015b828111156200015257825182559160200191906001019062000135565b5b50905062000162919062000166565b5090565b5b808211156200018157600081600090555060010162000167565b5090565b60006200019c6200019684620002b1565b62000288565b905082815260208101848484011115620001bb57620001ba620003ec565b5b620001c8848285620002e7565b509392505050565b600082601f830112620001e857620001e7620003e7565b5b8151620001fa84826020860162000185565b91505092915050565b600080604083850312156200021d576200021c620003f6565b5b600083015167ffffffffffffffff8111156200023e576200023d620003f1565b5b6200024c85828601620001d0565b925050602083015167ffffffffffffffff81111562000270576200026f620003f1565b5b6200027e85828601620001d0565b9150509250929050565b600062000294620002a7565b9050620002a2828262000353565b919050565b6000604051905090565b600067ffffffffffffffff821115620002cf57620002ce620003b8565b5b620002da82620003fb565b9050602081019050919050565b60005b8381101562000307578082015181840152602081019050620002ea565b8381111562000317576000848401525b50505050565b600060028204905060018216806200033657607f821691505b602082108114156200034d576200034c62000389565b5b50919050565b6200035e82620003fb565b810181811067ffffffffffffffff8211171562000380576200037f620003b8565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61173b806200041c6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063a69df4b511610066578063a69df4b51461028a578063a9059cbb14610294578063db5671fb146102c4578063dd62ed3e146102e2576100f5565b80638da5cb5b1461021457806395d89b41146102325780639a315abc14610250578063a457c2d71461025a576100f5565b806323b872dd116100d357806323b872dd14610166578063313ce5671461019657806339509351146101b457806370a08231146101e4576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610312565b60405161010f919061116a565b60405180910390f35b610132600480360381019061012d9190610f44565b6103a4565b60405161013f919061114f565b60405180910390f35b6101506103c7565b60405161015d91906112ac565b60405180910390f35b610180600480360381019061017b9190610ef1565b6103d1565b60405161018d919061114f565b60405180910390f35b61019e610400565b6040516101ab91906112c7565b60405180910390f35b6101ce60048036038101906101c99190610f44565b610409565b6040516101db919061114f565b60405180910390f35b6101fe60048036038101906101f99190610e84565b6104b3565b60405161020b91906112ac565b60405180910390f35b61021c6104fb565b6040516102299190611134565b60405180910390f35b61023a610525565b604051610247919061116a565b60405180910390f35b6102586105b7565b005b610274600480360381019061026f9190610f44565b6105c1565b604051610281919061114f565b60405180910390f35b6102926106ab565b005b6102ae60048036038101906102a99190610f44565b610784565b6040516102bb919061114f565b60405180910390f35b6102cc6107a7565b6040516102d9919061114f565b60405180910390f35b6102fc60048036038101906102f79190610eb1565b6107be565b60405161030991906112ac565b60405180910390f35b606060038054610321906113dc565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906113dc565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b6000806103af610845565b90506103bc81858561084d565b600191505092915050565b6000600254905090565b6000806103dc610845565b90506103e9858285610a18565b6103f4858585610aa4565b60019150509392505050565b60006012905090565b600080610414610845565b90506104a8818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104a391906112fe565b61084d565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610534906113dc565b80601f0160208091040260200160405190810160405280929190818152602001828054610560906113dc565b80156105ad5780601f10610582576101008083540402835291602001916105ad565b820191906000526020600020905b81548152906001019060200180831161059057829003601f168201915b5050505050905090565b6105bf610d25565b565b6000806105cc610845565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610692576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106899061128c565b60405180910390fd5b61069f828686840361084d565b60019250505092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107329061120c565b60405180910390fd5b6000600560146101000a81548160ff0219169083151502179055507f19aad37188a1d3921e29eb3c66acf43d81975e107cb650d58cca878627955fd660405160405180910390a1565b60008061078f610845565b905061079c818585610aa4565b600191505092915050565b6000600560149054906101000a900460ff16905090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b49061126c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561092d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610924906111ac565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a0b91906112ac565b60405180910390a3505050565b6000610a2484846107be565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a9e5781811015610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a87906111cc565b60405180910390fd5b610a9d848484840361084d565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b9061124c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b9061118c565b60405180910390fd5b610b8f838383610dd2565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0c906111ec565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ca891906112fe565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d0c91906112ac565b60405180910390a3610d1f848484610e55565b50505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dac9061120c565b60405180910390fd5b6001600560146101000a81548160ff021916908315150217905550565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610e115750610e0f6107a7565b155b610e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e479061122c565b60405180910390fd5b505050565b505050565b600081359050610e69816116d7565b92915050565b600081359050610e7e816116ee565b92915050565b600060208284031215610e9a57610e9961146c565b5b6000610ea884828501610e5a565b91505092915050565b60008060408385031215610ec857610ec761146c565b5b6000610ed685828601610e5a565b9250506020610ee785828601610e5a565b9150509250929050565b600080600060608486031215610f0a57610f0961146c565b5b6000610f1886828701610e5a565b9350506020610f2986828701610e5a565b9250506040610f3a86828701610e6f565b9150509250925092565b60008060408385031215610f5b57610f5a61146c565b5b6000610f6985828601610e5a565b9250506020610f7a85828601610e6f565b9150509250929050565b610f8d81611354565b82525050565b610f9c81611366565b82525050565b6000610fad826112e2565b610fb781856112ed565b9350610fc78185602086016113a9565b610fd081611471565b840191505092915050565b6000610fe86023836112ed565b9150610ff382611482565b604082019050919050565b600061100b6022836112ed565b9150611016826114d1565b604082019050919050565b600061102e601d836112ed565b915061103982611520565b602082019050919050565b60006110516026836112ed565b915061105c82611549565b604082019050919050565b60006110746011836112ed565b915061107f82611598565b602082019050919050565b60006110976015836112ed565b91506110a2826115c1565b602082019050919050565b60006110ba6025836112ed565b91506110c5826115ea565b604082019050919050565b60006110dd6024836112ed565b91506110e882611639565b604082019050919050565b60006111006025836112ed565b915061110b82611688565b604082019050919050565b61111f81611392565b82525050565b61112e8161139c565b82525050565b60006020820190506111496000830184610f84565b92915050565b60006020820190506111646000830184610f93565b92915050565b600060208201905081810360008301526111848184610fa2565b905092915050565b600060208201905081810360008301526111a581610fdb565b9050919050565b600060208201905081810360008301526111c581610ffe565b9050919050565b600060208201905081810360008301526111e581611021565b9050919050565b6000602082019050818103600083015261120581611044565b9050919050565b6000602082019050818103600083015261122581611067565b9050919050565b600060208201905081810360008301526112458161108a565b9050919050565b60006020820190508181036000830152611265816110ad565b9050919050565b60006020820190508181036000830152611285816110d0565b9050919050565b600060208201905081810360008301526112a5816110f3565b9050919050565b60006020820190506112c16000830184611116565b92915050565b60006020820190506112dc6000830184611125565b92915050565b600081519050919050565b600082825260208201905092915050565b600061130982611392565b915061131483611392565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156113495761134861140e565b5b828201905092915050565b600061135f82611372565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156113c75780820151818401526020810190506113ac565b838111156113d6576000848401525b50505050565b600060028204905060018216806113f457607f821691505b602082108114156114085761140761143d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f5065726d697373696f6e2044656e696564000000000000000000000000000000600082015250565b7f5472616e73666572206e6f7420616c6c6f7765642e0000000000000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6116e081611354565b81146116eb57600080fd5b50565b6116f781611392565b811461170257600080fd5b5056fea26469706673582212209d2cf987a8e0b18e5d638e8ea79fe398f9b556bdad85883a121819981c60006664736f6c63430008070033'

type LimitedTokenForTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: LimitedTokenForTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class LimitedTokenForTest__factory extends ContractFactory {
  constructor(...args: LimitedTokenForTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
    this.contractName = 'LimitedTokenForTest'
  }

  deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LimitedTokenForTest> {
    return super.deploy(
      name_,
      symbol_,
      overrides || {}
    ) as Promise<LimitedTokenForTest>
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {})
  }
  attach(address: string): LimitedTokenForTest {
    return super.attach(address) as LimitedTokenForTest
  }
  connect(signer: Signer): LimitedTokenForTest__factory {
    return super.connect(signer) as LimitedTokenForTest__factory
  }
  static readonly contractName: 'LimitedTokenForTest'
  public readonly contractName: 'LimitedTokenForTest'
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): LimitedTokenForTestInterface {
    return new utils.Interface(_abi) as LimitedTokenForTestInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LimitedTokenForTest {
    return new Contract(address, _abi, signerOrProvider) as LimitedTokenForTest
  }
}
